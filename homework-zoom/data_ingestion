#!/usr/bin/env python
# coding: utf-8

import os
import argparse

from time import time

import pandas as pd
from sqlalchemy import create_engine


def main(params):
    user = params.user
    password = params.password
    host = params.host 
    port = params.port 
    db = params.db
    #table_name = params.table_name
    #url = params.url

    # download the CSV file
    os.system('wget https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2019-09.csv.gz -O green_trip_2019.csv.gz')
    os.system('wget https://s3.amazonaws.com/nyc-tlc/misc/taxi+_zone_lookup.csv -O taxi_zone.csv')
    os.system(f"wget https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz -O yellow_trip.csv.gz")
    os.system(f"gzip -d yellow_trip.csv.gz")
    os.system("gzip -d green_trip_2019.csv.gz")

    engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{db}')

    df2=pd.read_csv('taxi_zone.csv')
    
    df2.head(n=0).to_sql(name='taxi_zone', con=engine, if_exists='replace')
    
    df2.to_sql(name='taxi_zone', con=engine, if_exists='append')

    df_iter = pd.read_csv(r'green_trip_2019.csv', iterator=True, chunksize=100000)

    df = next(df_iter)

    df.lpep_pickup_datetime = pd.to_datetime(df.lpep_pickup_datetime)
    df.lpep_dropoff_datetime = pd.to_datetime(df.lpep_dropoff_datetime)

    df.head(n=0).to_sql(name='green_taxi_trips', con=engine, if_exists='replace')

    df.to_sql(name='green_taxi_trips', con=engine, if_exists='append')


    while True:
        try:
            t_start = time()

            df = next(df_iter)

            df.lpep_pickup_datetime = pd.to_datetime(df.lpep_pickup_datetime)
            df.lpep_dropoff_datetime = pd.to_datetime(df.lpep_dropoff_datetime)

            df.to_sql(name='green_taxi_trips', con=engine, if_exists='append')

            t_end = time()

            print('inserted another chunk, took %.3f second' % (t_end - t_start))
        except StopIteration:
            print('completed')
            break
        
    df_iter = pd.read_csv(r'yellow_trip.csv', iterator=True, chunksize=100000)

    df = next(df_iter)

    df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
    df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

    df.head(n=0).to_sql(name='yellow_taxi_trips', con=engine, if_exists='replace')

    df.to_sql(name='yellow_taxi_trips', con=engine, if_exists='append')


    while True:
        try:
            t_start = time()

            df = next(df_iter)

            df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
            df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

            df.to_sql(name='yellow_taxi_trips', con=engine, if_exists='append')

            t_end = time()

            print('inserted another chunk, took %.3f second' % (t_end - t_start))
        except StopIteration:
            print('completed')
            break

if __name__ == '__main__':
    # Parse the command line arguments and calls the main program
    parser = argparse.ArgumentParser(description='Ingest CSV data to Postgres')

    parser.add_argument('--user', help='user name for postgres')
    parser.add_argument('--password', help='password for postgres')
    parser.add_argument('--host', help='host for postgres')
    parser.add_argument('--port', help='port for postgres')
    parser.add_argument('--db', help='database name for postgres')
    #parser.add_argument('--table_name', help='name of the table where we will write the results to')
    #parser.add_argument('--url', help='url of the csv file')

    args = parser.parse_args()

    main(args)
